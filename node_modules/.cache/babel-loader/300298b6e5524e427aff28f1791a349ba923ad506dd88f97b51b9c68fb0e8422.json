{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Valtteri\\\\Documents\\\\GitHub\\\\PlannerApp\\\\src\\\\pages\\\\Trips.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './Trips.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Trips() {\n  _s();\n  const navigate = useNavigate();\n  const [trips, setTrips] = useState([]);\n  const [countryImages, setCountryImages] = useState({}); // Store country-to-image mapping\n\n  const UNSPLASH_API_KEY = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n  console.log('Unsplash API Key:', process.env.REACT_APP_UNSPLASH_ACCESS_KEY);\n  console.log('Test Variable:', process.env.REACT_APP_TEST_VARIABLE);\n  const formatDateToDDMMYYYY = dateString => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year}`;\n  };\n\n  // Fetch a random image for a country using Unsplash API\n  const fetchCountryImage = async country => {\n    if (!country || countryImages[country]) return; // Skip if no country or already fetched\n\n    try {\n      const response = await axios.get(`https://api.unsplash.com/search/photos`, {\n        params: {\n          query: country,\n          client_id: UNSPLASH_API_KEY,\n          per_page: 1\n        }\n      });\n      const imageUrl = response.data.results.length > 0 ? response.data.results[0].urls.regular : '/images/fallback.jpg'; // Fallback image\n\n      setCountryImages(prev => ({\n        ...prev,\n        [country]: imageUrl\n      }));\n    } catch (error) {\n      console.error(`Error fetching image for ${country}:`, error);\n      setCountryImages(prev => ({\n        ...prev,\n        [country]: '/images/fallback.jpg'\n      }));\n    }\n  };\n  useEffect(() => {\n    const fetchTrips = async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No token found, redirecting to login...');\n        navigate('/login');\n        return;\n      }\n      try {\n        const response = await axios.get('http://localhost:5000/api/trips', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Fetched trips:', response.data);\n        console.log('Number of trips:', trips.length);\n        console.log('Trips:', trips);\n        setTrips(response.data);\n      } catch (error) {\n        console.error('Error fetching trips:', error.response || error.message);\n      }\n    };\n    fetchTrips();\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trips-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Trips\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), trips.length > 0 ? trips.map(trip => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trip-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uD83D\\uDCCD \", trip.trip_name || 'Unnamed Trip']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Country: \", trip.selected_country || 'Unknown']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDCC5 \", trip.start_date ? formatDateToDDMMYYYY(trip.start_date) : 'N/A', \" -\", trip.end_date ? formatDateToDDMMYYYY(trip.end_date) : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: countryImages[trip.selected_country] || '/images/fallback.jpg',\n        alt: `View of ${trip.selected_country}`,\n        className: \"trip-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"details-button\",\n        onClick: () => navigate(`/trip-info/${trip.id}`),\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, trip.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No trips yet. Create your first trip!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(Trips, \"EXsu6Rx6SwxOJF+xMGKmy51KbV0=\", false, function () {\n  return [useNavigate];\n});\n_c = Trips;\nexport default Trips;\nvar _c;\n$RefreshReg$(_c, \"Trips\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Trips","_s","navigate","trips","setTrips","countryImages","setCountryImages","UNSPLASH_API_KEY","process","env","REACT_APP_UNSPLASH_ACCESS_KEY","console","log","REACT_APP_TEST_VARIABLE","formatDateToDDMMYYYY","dateString","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","fetchCountryImage","country","response","get","params","query","client_id","per_page","imageUrl","data","results","length","urls","regular","prev","error","fetchTrips","token","localStorage","getItem","headers","Authorization","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","trip","trip_name","selected_country","start_date","end_date","src","alt","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/Valtteri/Documents/GitHub/PlannerApp/src/pages/Trips.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './Trips.css';\n\nfunction Trips() {\n    const navigate = useNavigate();\n    const [trips, setTrips] = useState([]);\n    const [countryImages, setCountryImages] = useState({}); // Store country-to-image mapping\n\n    const UNSPLASH_API_KEY = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n    console.log('Unsplash API Key:', process.env.REACT_APP_UNSPLASH_ACCESS_KEY);\n    console.log('Test Variable:', process.env.REACT_APP_TEST_VARIABLE);\n\n\n\n\n    const formatDateToDDMMYYYY = (dateString) => {\n        if (!dateString) return 'N/A';\n        const date = new Date(dateString);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        return `${day}.${month}.${year}`;\n    };\n\n    // Fetch a random image for a country using Unsplash API\n    const fetchCountryImage = async (country) => {\n        if (!country || countryImages[country]) return; // Skip if no country or already fetched\n\n        try {\n            const response = await axios.get(`https://api.unsplash.com/search/photos`, {\n                params: {\n                    query: country,\n                    client_id: UNSPLASH_API_KEY,\n                    per_page: 1,\n                },\n            });\n\n            const imageUrl =\n                response.data.results.length > 0\n                    ? response.data.results[0].urls.regular\n                    : '/images/fallback.jpg'; // Fallback image\n\n            setCountryImages((prev) => ({ ...prev, [country]: imageUrl }));\n        } catch (error) {\n            console.error(`Error fetching image for ${country}:`, error);\n            setCountryImages((prev) => ({ ...prev, [country]: '/images/fallback.jpg' }));\n        }\n    };\n\n    useEffect(() => {\n        const fetchTrips = async () => {\n            const token = localStorage.getItem('token');\n            if (!token) {\n                console.error('No token found, redirecting to login...');\n                navigate('/login');\n                return;\n            }\n    \n            try {\n                const response = await axios.get('http://localhost:5000/api/trips', {\n                    headers: { Authorization: `Bearer ${token}` },\n                });\n                console.log('Fetched trips:', response.data);\n                console.log('Number of trips:', trips.length);\nconsole.log('Trips:', trips);\n\n                setTrips(response.data);\n            } catch (error) {\n                console.error('Error fetching trips:', error.response || error.message);\n            }\n        };\n        fetchTrips();\n    }, [navigate]);\n    \n    \n\n    return (\n        <div className=\"trips-container\">\n            <h2>Your Trips</h2>\n            {trips.length > 0 ? (\n    trips.map((trip) => (\n        <div key={trip.id} className=\"trip-card\">\n            <h3>üìç {trip.trip_name || 'Unnamed Trip'}</h3>\n            <p>Country: {trip.selected_country || 'Unknown'}</p>\n            <p>\n                üìÖ {trip.start_date ? formatDateToDDMMYYYY(trip.start_date) : 'N/A'} - \n                {trip.end_date ? formatDateToDDMMYYYY(trip.end_date) : 'N/A'}\n            </p>\n            <img\n                src={countryImages[trip.selected_country] || '/images/fallback.jpg'}\n                alt={`View of ${trip.selected_country}`}\n                className=\"trip-image\"\n            />\n            <button\n                className=\"details-button\"\n                onClick={() => navigate(`/trip-info/${trip.id}`)}\n\n            >\n                View Details\n            </button>\n        </div>\n    ))\n) : (\n    <p>No trips yet. Create your first trip!</p>\n\n)}\n\n        </div>\n    );\n}\n\nexport default Trips;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}