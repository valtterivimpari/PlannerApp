{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Valtteri\\\\Documents\\\\GitHub\\\\PlannerApp\\\\src\\\\pages\\\\Destination.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './Destination.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Destination() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [trip, setTrip] = useState(null);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Simulate fetching trip data (replace this with your actual API call)\n    const trips = JSON.parse(localStorage.getItem('trips')) || [];\n    const currentTrip = trips.find(t => t.id === parseInt(id));\n    if (currentTrip) {\n      setTrip(currentTrip);\n      setSelectedCountry(currentTrip.selected_country || '');\n    } else {\n      console.error('Trip not found');\n    }\n  }, [id]);\n  const handleDestinationSelection = country => {\n    setSelectedCountry(country);\n    // Navigate to trip info after selection\n    navigate(`/trip-info/${id}`, {\n      state: {\n        selectedCountry: country\n      }\n    });\n  };\n  if (!trip) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"destination-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Your trip to \", selectedCountry || 'Select a country']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"destination-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"destination-input\",\n        placeholder: \"Search any place in the world...\",\n        onKeyDown: e => {\n          if (e.key === 'Enter' && e.target.value.trim()) {\n            handleDestinationSelection(e.target.value.trim());\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-country\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Selected Country: \", selectedCountry]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(Destination, \"l8dl5UqiNocggxU/Za5cNNdSOGI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Destination;\nexport default Destination;\nvar _c;\n$RefreshReg$(_c, \"Destination\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","Destination","_s","id","trip","setTrip","selectedCountry","setSelectedCountry","navigate","trips","JSON","parse","localStorage","getItem","currentTrip","find","t","parseInt","selected_country","console","error","handleDestinationSelection","country","state","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onKeyDown","e","key","target","value","trim","_c","$RefreshReg$"],"sources":["C:/Users/Valtteri/Documents/GitHub/PlannerApp/src/pages/Destination.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './Destination.css';\r\n\r\nfunction Destination() {\r\n    const { id } = useParams();\r\n    const [trip, setTrip] = useState(null);\r\n    const [selectedCountry, setSelectedCountry] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Simulate fetching trip data (replace this with your actual API call)\r\n        const trips = JSON.parse(localStorage.getItem('trips')) || [];\r\n        const currentTrip = trips.find((t) => t.id === parseInt(id));\r\n\r\n        if (currentTrip) {\r\n            setTrip(currentTrip);\r\n            setSelectedCountry(currentTrip.selected_country || '');\r\n        } else {\r\n            console.error('Trip not found');\r\n        }\r\n    }, [id]);\r\n\r\n    const handleDestinationSelection = (country) => {\r\n        setSelectedCountry(country);\r\n        // Navigate to trip info after selection\r\n        navigate(`/trip-info/${id}`, { state: { selectedCountry: country } });\r\n    };\r\n\r\n    if (!trip) return <p>Loading...</p>;\r\n\r\n    return (\r\n        <div className=\"destination-container\">\r\n            <h1>Your trip to {selectedCountry || 'Select a country'}</h1>\r\n            <div className=\"destination-input-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"destination-input\"\r\n                    placeholder=\"Search any place in the world...\"\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter' && e.target.value.trim()) {\r\n                            handleDestinationSelection(e.target.value.trim());\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            {selectedCountry && (\r\n                <div className=\"selected-country\">\r\n                    <h2>Selected Country: {selectedCountry}</h2>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Destination;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}